name: Windows

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
      - '*.*.*'
  pull_request:
    branches: [ main ]

permissions:
  contents: write

  
jobs:
  build:
    runs-on: windows-latest

    env:
      GH_TOKEN: ${{ github.token }}

    steps:
    - name: Checkout Bobcat repository
      uses: actions/checkout@v3
      with:
        path: Bobcat

    - name: Download U++ Windows release
      run: |
        Invoke-WebRequest -Uri "https://github.com/ultimatepp/ultimatepp/releases/download/2025.1/upp-win-17799.7z" -OutFile "upp-win.7z"

    - name: Extract U++ release
      run: |
        7z x upp-win.7z -oupp-source

    # Since there is a problem with UppHub access of umk, we'll checkout the required components manually.
    
    - name: Checkout TerminalCtrl repository
      uses: actions/checkout@v3
      with:
        repository: ismail-yilmaz/Terminal
        path: upp-source/upp/UppHub/Terminal

    - name: Checkout StackCtrl repository
      uses: actions/checkout@v3
      with:
        repository: ismail-yilmaz/StackCtrl
        path: upp-source/upp/UppHub/StackCtrl

    - name: Checkout MessageCtrl repository
      uses: actions/checkout@v3
      with:
        repository: ismail-yilmaz/MessageCtrl
        path: upp-source/upp/UppHub/MessageCtrl

    - name: Checkout Turtle repository
      uses: actions/checkout@v3
      with:
        repository: mirek-fidler/Turtle
        path: upp-source/upp/UppHub/Turtle
    
    # On Windows, no build file is generated. We are generating it dynamically with a basic configuration

    - name: Create a CLANG.bm file
      working-directory: upp-source/upp
      env: 
        UPP_ROOT: "..\\upp-source\\upp\\"
      run: |
        $content = @'
        BUILDER = "CLANG";
        COMPILER = "";
        COMMON_OPTIONS = "";
        COMMON_CPP_OPTIONS = "--std=c++17";
        COMMON_C_OPTIONS = "";
        COMMON_LINK = "";
        COMMON_FLAGS = "";
        DEBUG_INFO = "2";
        DEBUG_BLITZ = "1";
        DEBUG_LINKMODE = "0";
        DEBUG_OPTIONS = "";
        DEBUG_FLAGS = "";
        DEBUG_LINK = "-Wl,--stack,20000000";
        RELEASE_BLITZ = "1";
        RELEASE_LINKMODE = "0";
        RELEASE_OPTIONS = "-O3 ";
        RELEASE_FLAGS = "";
        RELEASE_LINK = "-Wl,--stack,20000000";
        DEBUGGER = "gdb";
        ALLOW_PRECOMPILED_HEADERS = "1";
        DISABLE_BLITZ = "0";
        PATH = "C${{ env.UPP_ROOT }}/bin/clang/bin;C${{ env.UPP_ROOT }}/bin/clang/x86_64-w64-mingw32/bin;C${{ env.UPP_ROOT }}/bin/SDL2/lib/x64;C${{ env.UPP_ROOT }}/bin/pgsql/x64/bin;C${{ env.UPP_ROOT }}/bin/mysql/lib64";
        INCLUDE = "C${{ env.UPP_ROOT }}/bin/SDL2/include;C${{ env.UPP_ROOT }}/bin/pgsql/x64/include;C${{ env.UPP_ROOT }}/bin/mysql/include;C${{ env.UPP_ROOT }}/bin/llvm";
        LIB = "C${{ env.UPP_ROOT }}/bin/SDL2/lib/x64;C${{ env.UPP_ROOT }}/bin/pgsql/x64/lib;C${{ env.UPP_ROOT }}/bin/mysql/lib64;C${{ env.UPP_ROOT }}/bin/llvm";
        LINKMODE_LOCK = "0";
        '@

        $content | Out-File -FilePath CLANG.bm -Encoding utf8
  
    - name: Build Bobcat
      working-directory: Bobcat
      run: |
        ..\upp-source\upp\umk.exe .\,..\upp-source\upp\uppsrc Bobcat CLANG.bm -arb +GUI,WIN64,WIN10 bobcat
        mkdir out
        copy Bobcat\Bobcat.exe out\Bobcat.exe

    - name: Build PtyAgent
      working-directory: Bobcat
      run: |
        ..\upp-source\upp\umk.exe ..\upp-source\upp\UppHub\Terminal,..\upp-source\upp\uppsrc PtyAgent CLANG.bm -arb +WIN64 ptyagent
        cp ptyagent.exe out\PtyAgent.exe

    - name: Download Bobcat assets
      uses: actions/checkout@v3
      with:
        repository: ismail-yilmaz/Bobcat-Assets
        path: bobcat-assets

    - name: Copy binaries from the assets repo
      run: |
        cp bobcat-assets/OpenConsole.exe Bobcat/out/
        cp bobcat-assets/conpty.dll Bobcat/out/
        
    # Upload artifacts for main branch builds

    - name: Archive binaries
      if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: bobcat-win64
        path: Bobcat/out/*

    # Release handling
    
    - name: Get the version
      if: startsWith(github.ref, 'refs/tags/')
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
      shell: bash

    - name: Compress binaries
      if: startsWith(github.ref, 'refs/tags/')
      working-directory: Bobcat
      run: |
        Compress-Archive -Path out\* -DestinationPath "bobcat-${{ env.VERSION }}-win64.zip"

    - name: Create GitHub release & upload asset
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ env.VERSION }}
        release_name: Release ${{ env.VERSION }}
        draft: false
        prerelease: false
        files: Bobcat/bobcat-${{ env.VERSION }}-win64.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
